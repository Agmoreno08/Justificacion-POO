package com.agma.justificationpoo.modelo;

import java.util.*;

import javax.persistence.*;

import org.openxava.annotations.*;

import lombok.*;

@Entity
@Getter
@Setter
@View(members = """
    personalInformation {
        fullName, email;
        subjects;
    },
    notifications;
""")
public class Teacher {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(length = 50, nullable = false)
    @Required
    private String firstName;

    @Column(length = 50, nullable = false)
    @Required
    private String lastName;

    @Stereotype("EMAIL")
    @Column(length = 100, nullable = false)
    @Required
    private String email;

    @Column(length = 200)
    @Stereotype("MEMO") // Usar un área de texto para materias largas
    private String subjects;

    // Relación con documentos de justificación
    @OneToMany(mappedBy = "teacher", cascade = CascadeType.ALL, orphanRemoval = true)
    @ListProperties("id, documentType, validationStatus, submittedDate")
    private List<JustificationDocument> notifications;

    // Relación con materias enseñadas por el profesor
    @OneToMany(mappedBy = "teacher", cascade = CascadeType.ALL, orphanRemoval = true)
    @ListProperties("name, code, schedule")
    @CollectionView("Simple") // Vista simple para mostrar las materias
    private List<Subject> taughtSubjects;

    @Depends("firstName, lastName")
    @Stereotype("LABEL")
    public String getFullName() {
        return firstName + " " + lastName;
    }

    @Action
    public void notifyPendingDocuments() {
        // Simula una notificación de documentos pendientes
        for (JustificationDocument document : notifications) {
            if (document.getValidationStatus() == ValidationStatus.PENDING) {
                System.out.println("Notificación enviada para el documento: " + document.getId());
            }
        }
    }

    @Action
    public void addSubject(String name, String code, String schedule) {
        if (taughtSubjects == null) {
            taughtSubjects = new ArrayList<>();
        }
        Subject subject = new Subject();
        subject.setName(name);
        subject.setCode(code);
        subject.setSchedule(schedule);
        subject.setTeacher(this);
        taughtSubjects.add(subject);
    }

    @Action
    public void printSummary() {
        System.out.println("Resumen del Profesor:");
        System.out.println("Nombre Completo: " + getFullName());
        System.out.println("Correo Electrónico: " + email);
        System.out.println("Materias: " + (subjects != null ? subjects : "Ninguna"));
        System.out.println("Total de Documentos Notificados: " + (notifications != null ? notifications.size() : 0));
    }
}
